// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ Supabase ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≥–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è supabase –∏–∑ index.html

let products = [];
const container = document.getElementById("productsList");
const addButton = document.getElementById("addProductBtn");
const nameInput = document.getElementById("productName");
const shareInput = document.getElementById("marketShare");
const growthInput = document.getElementById("marketGrowth");
const sizeInput = document.getElementById("productSize");

// === –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Supabase ===
async function loadProductsFromSupabase() {
  const { data, error } = await supabase
    .from("products")
    .select("*")
    .order("id", { ascending: true });

  if (error) {
    console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏:", error);
    return;
  }

  products = data || [];
  renderProductsList();
  updateChart();
}

// === –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ ===
async function addProduct() {
  const name = nameInput.value.trim();
  const marketShare = parseFloat(shareInput.value);
  const marketGrowth = parseFloat(growthInput.value);
  const size = parseFloat(sizeInput.value);

  if (!name || isNaN(marketShare) || isNaN(marketGrowth) || isNaN(size)) {
    alert("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.");
    return;
  }

  const { error } = await supabase.from("products").insert([
    { name, marketShare, marketGrowth, size },
  ]);

  if (error) {
    console.error("–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:", error);
    alert("–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç üò¢");
  } else {
    nameInput.value = "";
    shareInput.value = "";
    growthInput.value = "";
    sizeInput.value = "";
  }
}

// === –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ ===
async function deleteProduct(id) {
  const { error } = await supabase.from("products").delete().eq("id", id);
  if (error) {
    console.error("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è:", error);
  }
}

// === –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ ===
function renderProductsList() {
  container.innerHTML = "";
  products.forEach((p) => {
    const div = document.createElement("div");
    div.className = "product-item";
    div.innerHTML = `
      <span>${p.name} ‚Äî –¥–æ–ª—è: ${p.marketShare}%, —Ä–æ—Å—Ç: ${p.marketGrowth}%, —Ä–∞–∑–º–µ—Ä: ${p.size}</span>
      <button onclick="deleteProduct(${p.id})">‚ùå</button>
    `;
    container.appendChild(div);
  });
}

// === –î–∏–∞–≥—Ä–∞–º–º–∞ (–ø—Ä–∏–º–µ—Ä ‚Äî –ø—Ä–æ—Å—Ç–æ –∫–æ–Ω—Å–æ–ª—å, –µ—Å–ª–∏ –µ—Å—Ç—å chart.js, –º–æ–∂–Ω–æ –≤—Å—Ç–∞–≤–∏—Ç—å –∫–æ–¥ —Å—é–¥–∞) ===
function updateChart() {
  console.log("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö:", products);
  // –ó–¥–µ—Å—å –≤—Å—Ç–∞–≤—å –∫–æ–¥ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∏–∞–≥—Ä–∞–º–º—ã (–µ—Å–ª–∏ –µ—Å—Ç—å Chart.js –∏–ª–∏ canvas)
}

// === –†–µ–∞–∫—Ü–∏—è –Ω–∞ –∫–ª–∏–∫–∏ ===
addButton.addEventListener("click", addProduct);

// === –†–µ–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è (–∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö —É –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π) ===
supabase
  .channel("products-changes")
  .on(
    "postgres_changes",
    { event: "*", schema: "public", table: "products" },
    (payload) => {
      console.log("–ò–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ç–∞–±–ª–∏—Ü–µ:", payload);
      loadProductsFromSupabase(); // –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ
    }
  )
  .subscribe();

// === –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ ===
loadProductsFromSupabase();
